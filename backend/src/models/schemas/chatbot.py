"""
Imports required for defining Pydantic models and handling optional fields in chat-related schemas.

- Optional: Specifies that a field may or may not be present (can be None).
- BaseModel: Pydantic's base class for creating data validation and parsing models.
- DoctorResponse: Schema representing a doctor's information for responses.
"""

from typing import Optional

from pydantic import BaseModel

from src.models.schemas.doctor import DoctorResponse


class ChatQuery(BaseModel):
    """
    ChatQuery represents the data structure for a chat message query.

    Attributes:
        user_message (str): The message sent by the user.
    """

    user_message: str


class ChatResponse(BaseModel):
    """
    ChatResponse represents the structure for the chatbot's reply.

    Attributes:
        response (str): The main response or answer generated by the chatbot.
        doctors (Optional[list[DoctorResponse]]): A list of doctors related to the query,
        if applicable. Defaults to None if no doctors are included in the response.
    """

    response: str
    doctors: Optional[list[DoctorResponse]] = None
